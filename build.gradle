buildscript {
    repositories {
        maven {
            url "https://s3-eu-west-1.amazonaws.com/gskillz-maven-repo"
        }
    }

    dependencies {
        classpath "aspectjfork:gradle:1.1-SNAPSHOT"
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

group 'org.apilytic'
version '1.0-SNAPSHOT'

project.ext {
    aspectjVersion = '1.9.3'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'gradle.aspectjfork'
//apply plugin: AspectJGradlePlugin
apply plugin: 'jacoco'

interface NamingConventions {

    String getJavaCompileTaskName(SourceSet sourceSet);

    String getAspectCompileTaskName(SourceSet sourceSet);

    String getAspectPathConfigurationName(SourceSet sourceSet);

    String getAspectInpathConfigurationName(SourceSet sourceSet);
}

class AspectJGradlePlugin implements Plugin<Project> {

    void apply(Project project) {
        project.plugins.apply(JavaPlugin)

        if (!project.hasProperty('aspectjVersion')) {
            throw new GradleException("You must set the property 'aspectjVersion' before applying the aspectj plugin")
        }

        if (project.configurations.findByName('ajtools') == null) {
            project.configurations.create('ajtools')
            project.dependencies {
                ajtools "org.aspectj:aspectjtools:${project.aspectjVersion}"
                compile "org.aspectj:aspectjrt:${project.aspectjVersion}"
            }
        }

        for (projectSourceSet in project.sourceSets) {
            def namingConventions = projectSourceSet.name.equals('main') ? new MainNamingConventions() : new DefaultNamingConventions();
            for (configuration in [namingConventions.getAspectPathConfigurationName(projectSourceSet), namingConventions.getAspectInpathConfigurationName(projectSourceSet)]) {
                if (project.configurations.findByName(configuration) == null) {
                    project.configurations.create(configuration)
                }
            }

            if (!projectSourceSet.allJava.isEmpty()) {
                def aspectTaskName = namingConventions.getAspectCompileTaskName(projectSourceSet)
                def javaTaskName = namingConventions.getJavaCompileTaskName(projectSourceSet)

                project.tasks.create(name: aspectTaskName, overwrite: true, description: "Compiles AspectJ Source for ${projectSourceSet.name} source set", type: Ajc) {
                    sourceSet = projectSourceSet
                    inputs.files(sourceSet.allJava)
                    outputs.dir(sourceSet.java.outputDir)
                    aspectpath = project.configurations.findByName(namingConventions.getAspectPathConfigurationName(projectSourceSet))
                    ajInpath = project.configurations.findByName(namingConventions.getAspectInpathConfigurationName(projectSourceSet))
                }

                project.tasks[aspectTaskName].setDependsOn(project.tasks[javaTaskName].dependsOn)
                project.tasks[aspectTaskName].dependsOn(project.tasks[aspectTaskName].aspectpath)
                project.tasks[aspectTaskName].dependsOn(project.tasks[aspectTaskName].ajInpath)
                project.tasks[javaTaskName].getActions().clear()
                project.tasks[javaTaskName].dependsOn(project.tasks[aspectTaskName])
            }
        }
    }

    private static class MainNamingConventions implements NamingConventions {

        @Override
        String getJavaCompileTaskName(final SourceSet sourceSet) {
            return "compileJava"
        }

        @Override
        String getAspectCompileTaskName(final SourceSet sourceSet) {
            return "compileAspect"
        }

        @Override
        String getAspectPathConfigurationName(final SourceSet sourceSet) {
            return "aspectpath"
        }

        @Override
        String getAspectInpathConfigurationName(final SourceSet sourceSet) {
            return "ajInpath"
        }
    }

    private static class DefaultNamingConventions implements NamingConventions {

        @Override
        String getJavaCompileTaskName(final SourceSet sourceSet) {
            return "compile${sourceSet.name.capitalize()}Java"
        }

        @Override
        String getAspectCompileTaskName(final SourceSet sourceSet) {
            return "compile${sourceSet.name.capitalize()}Aspect"
        }

        @Override
        String getAspectPathConfigurationName(final SourceSet sourceSet) {
            return "${sourceSet.name}Aspectpath"
        }

        @Override
        String getAspectInpathConfigurationName(final SourceSet sourceSet) {
            return "${sourceSet.name}AjInpath"
        }
    }
}

class Ajc extends DefaultTask {

    SourceSet sourceSet

    FileCollection aspectpath
    FileCollection ajInpath

    // ignore or warning
    String xlint = 'ignore'

    String maxmem
    Map<String, String> additionalAjcArgs

    Ajc() {
        logging.captureStandardOutput(LogLevel.INFO)
    }

    @TaskAction
    def compile() {
        logger.info("=" * 30)
        logger.info("=" * 30)
        logger.info("Running ajc ...")
        logger.info("classpath: ${sourceSet.compileClasspath.asPath}")
        logger.info("srcDirs $sourceSet.java.srcDirs")

        def iajcArgs = [classpath    : sourceSet.compileClasspath.asPath,
                        destDir      : sourceSet.output.classesDirs.asPath,
                        s            : sourceSet.output.classesDirs.asPath,
                        source       : project.convention.plugins.java.sourceCompatibility,
                        target       : project.convention.plugins.java.targetCompatibility,
                        inpath       : sourceSet.output.classesDirs.asPath,
                        xlint        : xlint,
                        fork         : 'false',
                        aspectPath   : aspectpath.asPath,
                        showWeaveInfo: 'true']

        if (null != maxmem) {
            iajcArgs['maxmem'] = maxmem
        }

        if (null != additionalAjcArgs) {
            for (pair in additionalAjcArgs) {
                iajcArgs[pair.key] = pair.value
            }
        }

        ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: project.configurations.ajtools.asPath)
        ant.iajc(iajcArgs) {
            sourceRoots {
                sourceSet.java.srcDirs.each {
                    logger.info("   sourceRoot $it")
                    pathelement(location: it.absolutePath)
                }
            }
        }
    }
}

mainClassName = 'org.apilytic.currency.HelloWorld'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/libs-milestone" }
}

ext.deps = [
        springVersion    : '5.1.2.RELEASE',
        springDataVersion: '2.1.2.RELEASE',
        jackson2Version  : '2.9.7',
        junitVersion     : '5.2.0',
]

compileAspect {
    xlint = 'warning'
}

dependencies {
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + deps.junitVersion
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + deps.junitVersion
    testCompile 'org.mockito:mockito-core:2.+'
    testCompile 'org.mockito:mockito-junit-jupiter:2.+'
    testCompile 'org.springframework:spring-test:' + deps.springVersion
    compile 'org.springframework:spring-core:' + deps.springVersion
    compile 'org.springframework:spring-web:' + deps.springVersion
    compile 'org.springframework:spring-oxm:' + deps.springVersion
    compile 'org.springframework:spring-aspects:' + deps.springVersion
    compile 'org.springframework.data:spring-data-redis:' + deps.springDataVersion
    compile 'io.reactivex.rxjava2:rxjava:2.0.8'
    compile 'redis.clients:jedis:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-core:' + deps.jackson2Version
    compile 'com.fasterxml.jackson.core:jackson-databind:' + deps.jackson2Version
    compile 'javax.xml.bind:jaxb-api:2.3.1'
    runtime 'org.glassfish.jaxb:jaxb-runtime:2.3.0'
    runtime 'javax.activation:activation:1.1.1'
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }

}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport
